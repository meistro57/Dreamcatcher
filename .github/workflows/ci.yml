name: Dreamcatcher CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18

jobs:
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: dreamcatcher_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/dreamcatcher_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        ANTHROPIC_API_KEY: test_key
        OPENAI_API_KEY: test_key
        COMFYUI_ENABLED: false
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      run: |
        cd frontend
        npm ci

    - name: 🔍 Run linting
      run: |
        cd frontend
        npm run lint

    - name: 🧪 Run tests
      run: |
        cd frontend
        npm run test

    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety

    - name: 🎨 Check code formatting
      run: |
        cd backend
        black --check --diff .

    - name: 🔍 Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🔒 Security checks
      run: |
        cd backend
        bandit -r . -x tests/
        safety check

    - name: 📝 Type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: dreamcatcher_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📦 Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build

    - name: 🚀 Start backend server
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/dreamcatcher_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        ANTHROPIC_API_KEY: test_key
        OPENAI_API_KEY: test_key
        COMFYUI_ENABLED: false
      run: |
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: 🔍 Health check
      run: |
        curl -f http://localhost:8000/api/health || exit 1

    - name: 🧪 Run integration tests
      run: |
        cd backend
        python -m pytest tests/test_api.py -v --tb=short

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Build Docker images
      run: |
        docker build -t dreamcatcher-backend:${{ github.sha }} backend/
        docker build -t dreamcatcher-frontend:${{ github.sha }} frontend/

    - name: 🏷️ Tag images
      run: |
        docker tag dreamcatcher-backend:${{ github.sha }} dreamcatcher-backend:latest
        docker tag dreamcatcher-frontend:${{ github.sha }} dreamcatcher-frontend:latest

    - name: 💾 Save Docker images
      run: |
        docker save dreamcatcher-backend:latest | gzip > backend-image.tar.gz
        docker save dreamcatcher-frontend:latest | gzip > frontend-image.tar.gz

    - name: 📊 Upload Docker artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          backend-image.tar.gz
          frontend-image.tar.gz

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: 📊 Report Status
      run: |
        echo "🎉 CI/CD Pipeline Results:"
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [ "${{ needs.test-backend.result }}" == "success" ] && \
           [ "${{ needs.test-frontend.result }}" == "success" ] && \
           [ "${{ needs.code-quality.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ All checks passed! Ready for deployment."
        else
          echo "❌ Some checks failed. Please review the results."
          exit 1
        fi